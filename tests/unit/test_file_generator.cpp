#include "test_file_generator.hpp"
#include <iostream>
#include <iomanip>
#include <sstream>

namespace TinaXlsx {

TestFileGenerator::TestFileGenerator(const std::string& testSuiteName) 
    : testSuiteName_(testSuiteName) {
    
    // 创建输出目录路径：test_output/TestSuiteName/
    outputDir_ = "test_output/" + testSuiteName_;
    createOutputDirectory();
}

std::unique_ptr<TXWorkbook> TestFileGenerator::createWorkbook(const std::string& filename) {
    auto workbook = std::make_unique<TXWorkbook>();

    // 注意：TXWorkbook目前不支持设置属性，这里只是创建工作簿
    // 可以在将来添加属性支持时取消注释以下代码：
    // workbook->setProperty("Title", "TinaXlsx Test: " + filename);
    // workbook->setProperty("Creator", "TinaXlsx Test Suite");
    // workbook->setProperty("Description", "Generated by " + testSuiteName_ + " test suite");

    return workbook;
}

bool TestFileGenerator::saveWorkbook(const std::unique_ptr<TXWorkbook>& workbook, const std::string& filename) {
    if (!workbook) {
        std::cerr << "Error: Workbook is null" << std::endl;
        return false;
    }

    std::string fullPath = getFilePath(filename);

    try {
        bool success = workbook->saveToFile(fullPath);
        if (success) {
            std::cout << "✓ Generated test file: " << fullPath << std::endl;
        } else {
            std::cerr << "✗ Failed to save file: " << fullPath << std::endl;
        }
        return success;
    } catch (const std::exception& e) {
        std::cerr << "✗ Exception while saving " << fullPath << ": " << e.what() << std::endl;
        return false;
    }
}

bool TestFileGenerator::saveWorkbook(std::unique_ptr<TXWorkbook>&& workbook, const std::string& filename) {
    return saveWorkbook(workbook, filename);
}

std::string TestFileGenerator::getFilePath(const std::string& filename) const {
    return outputDir_ + "/" + filename + ".xlsx";
}

void TestFileGenerator::addTestInfo(TXSheet* sheet, const std::string& testName, const std::string& description) {
    if (!sheet) return;
    
    // 添加测试信息到工作表的前几行
    sheet->setCellValue(row_t(1), column_t(1), cell_value_t{"测试套件:"});
    sheet->setCellValue(row_t(1), column_t(2), cell_value_t{testSuiteName_});
    
    sheet->setCellValue(row_t(2), column_t(1), cell_value_t{"测试名称:"});
    sheet->setCellValue(row_t(2), column_t(2), cell_value_t{testName});
    
    sheet->setCellValue(row_t(3), column_t(1), cell_value_t{"测试描述:"});
    sheet->setCellValue(row_t(3), column_t(2), cell_value_t{description});
    
    // 添加生成时间
    auto now = std::time(nullptr);
    auto tm = *std::localtime(&now);
    std::ostringstream oss;
    oss << std::put_time(&tm, "%Y-%m-%d %H:%M:%S");
    
    sheet->setCellValue(row_t(4), column_t(1), cell_value_t{"生成时间:"});
    sheet->setCellValue(row_t(4), column_t(2), cell_value_t{oss.str()});
    
    // 添加分隔行
    sheet->setCellValue(row_t(5), column_t(1), cell_value_t{"===================="});
    
    // 设置标题行的样式（如果支持的话）
    // 这里可以添加样式设置代码
}

void TestFileGenerator::createOutputDirectory() {
    try {
        std::filesystem::create_directories(outputDir_);
        std::cout << "Created output directory: " << outputDir_ << std::endl;
    } catch (const std::exception& e) {
        std::cerr << "Failed to create output directory " << outputDir_ << ": " << e.what() << std::endl;
    }
}

} // namespace TinaXlsx
